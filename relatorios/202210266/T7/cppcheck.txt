dijkstra.cpp:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 107 configurations. Use --force to check all configurations. [toomanyconfigs]

^
catch.hpp:2703:0: error: failed to expand 'REQUIRE', Invalid ## usage when expanding 'INTERNAL_CATCH_TEST'. [preprocessorErrorDirective]
#define INTERNAL_CATCH_TEST( macroName, resultDisposition, ... ) \
^
catch.hpp:17551:30: error: syntax error: =[...]; [syntaxError]
    NSAutoreleasePool * pool = [[NSAutoreleasePool alloc] init];
                             ^
catch.hpp:8039:9: style: Class 'FatalConditionHandlerGuard' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
        FatalConditionHandlerGuard(FatalConditionHandler* handler):
        ^
catch.hpp:8834:9: style: Class 'Args' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
        Args( std::initializer_list<std::string> args )
        ^
catch.hpp:9476:9: style: Struct 'Help' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
        Help( bool &showHelpFlag )
        ^
catch.hpp:9123:22: style: The function 'isFlag' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
        virtual auto isFlag() const -> bool { return true; }
                     ^
catch.hpp:9116:22: note: Virtual function in base class
        virtual auto isFlag() const -> bool { return false; }
                     ^
catch.hpp:9123:22: note: Function in derived class
        virtual auto isFlag() const -> bool { return true; }
                     ^
catch.hpp:8529:9: style: Local variable 'width' shadows outer function [shadowFunction]
   auto width = m_column.m_width - indent();
        ^
catch.hpp:8621:7: note: Shadowed declaration
 auto width(size_t newWidth) -> Column& {
      ^
catch.hpp:8529:9: note: Shadow variable
   auto width = m_column.m_width - indent();
        ^
catch.hpp:8687:17: style: Consider using std::transform algorithm instead of a raw loop. [useStlAlgorithm]
    m_iterators.push_back(col.end());
                ^
catch.hpp:8703:17: style: Consider using std::transform algorithm instead of a raw loop. [useStlAlgorithm]
    m_iterators.push_back(col.begin());
                ^
catch.hpp:9413:0: style: Consider using std::any_of algorithm instead of a raw loop. [useStlAlgorithm]
                if( normaliseOpt( name ) == normalisedToken )
^
catch.hpp:9564:26: style: Consider using std::accumulate algorithm instead of a raw loop. [useStlAlgorithm]
                optWidth = (std::max)(optWidth, cols.left.size() + 2);
                         ^
catch.hpp:7848:24: style: Local variable 'outlier_variance' shadows outer function [shadowFunction]
                double outlier_variance = Detail::outlier_variance(mean_estimate, stddev_estimate, n);
                       ^
catch.hpp:7784:20: note: Shadowed declaration
            double outlier_variance(Estimate<double> mean, Estimate<double> stddev, int n) {
                   ^
catch.hpp:7848:24: note: Shadow variable
                double outlier_variance = Detail::outlier_variance(mean_estimate, stddev_estimate, n);
                       ^
